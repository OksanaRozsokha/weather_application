// Mocks generated by Mockito 5.3.0 from annotations
// in weather_application/test/data/repositories/location_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:geolocator/geolocator.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_application/common/library_wrappers/geolocator_wrapper.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGeolocatorPlatform_0 extends _i1.SmartFake
    implements _i2.GeolocatorPlatform {
  _FakeGeolocatorPlatform_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [GeolocatorWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeolocatorWrapper extends _i1.Mock implements _i3.GeolocatorWrapper {
  MockGeolocatorWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GeolocatorPlatform get geolocatorPlatformInstance =>
      (super.noSuchMethod(Invocation.getter(#geolocatorPlatformInstance),
              returnValue: _FakeGeolocatorPlatform_0(
                  this, Invocation.getter(#geolocatorPlatformInstance)))
          as _i2.GeolocatorPlatform);
  @override
  _i2.LocationPermission get locationPermission => (super.noSuchMethod(
      Invocation.getter(#locationPermission),
      returnValue: _i2.LocationPermission.denied) as _i2.LocationPermission);
  @override
  set locationPermission(_i2.LocationPermission? _locationPermission) => super
      .noSuchMethod(Invocation.setter(#locationPermission, _locationPermission),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> requestPermission() => (super.noSuchMethod(
      Invocation.method(#requestPermission, []),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<Map<String, double>> getCurrentPositionCoordinates(
          {int? distanceFilter,
          Duration? timeLimit,
          _i3.GeolocatorWrapperAccuracy? accuracy}) =>
      (super.noSuchMethod(
              Invocation.method(#getCurrentPositionCoordinates, [], {
                #distanceFilter: distanceFilter,
                #timeLimit: timeLimit,
                #accuracy: accuracy
              }),
              returnValue:
                  _i4.Future<Map<String, double>>.value(<String, double>{}))
          as _i4.Future<Map<String, double>>);
}
